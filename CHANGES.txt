Next release

  - Add ``<bfg:settings>`` directive.  This directive currently allows
    only one attribute: ``reload_templates``.  If e.g.::

         <bfg:settings reload_templates="true"/>

    is in your application's ZCML, you will not need to restart the
    appserver in order for ``z3c.pt`` or XSLT template changes to be
    detected and displayed.

0.3.0

  - Add ``get_template`` API to template module.

0.2.9

  - 0.2.8 was "brown bag" release.  It didn't work at all.  Symptom:
    ComponentLookupError when trying to render a page.

0.2.8

  - Add ``find_model`` and ``find_root`` traversal APIs.  In the
    process, make ITraverser a uni-adapter (on context) rather than a
    multiadapter (on context and request).

0.2.7

  - Add a ``request_type`` attribute to the available attributes of a
    ``bfg:view`` configure.zcml element.  This attribute will have a
    value which is a dotted Python path, pointing at an interface.  If
    the request object implements this interface when the view lookup
    is performed, the appropriate view will be called.  This is meant
    to allow for simple "skinning" of sites based on request type.  An
    event subscriber should attach the interface to the request on
    ingress to support skins.

  - Remove "template only" views.  These were just confusing and were
    never documented.

  - Small url dispatch overhaul: the ``connect`` method of the
    ``urldispatch.RoutesMapper`` object now accepts a keyword
    parameter named ``context_factory``.  If this parameter is
    supplied, it must be a callable which returns an instance.  This
    instance is used as the context for the request when a route is
    matched.

  - The registration of a RoutesModelTraverser no longer needs to be
    performed by the application; it's in the bfg ZCML now.

0.2.6

  - Add event sends for INewRequest and INewResponse.  See the
    events.rst chapter in the documentation's ``api`` directory.

0.2.5

  - Add ``model_url`` API.

0.2.4

  - Added url-based dispatch.

0.2.3

  - Add API functions for authenticated_userid and effective_principals.

0.2.2

  - Add authenticated_userid and effective_principals API to security
    policy.

0.2.1

  - Add find_interface API.

0.2

  - Add wsgiapp decorator.

  - The concept of "view factories" was removed in favor of always
    calling a view, which is a callable that returns a response
    directly (as opposed to returning a view).  As a result, the
    ``factory`` attribute in the bfg:view ZCML statement has been
    renamed to ``view``.  Various interface names were changed also.

  - ``render_template`` and ``render_transform`` no longer return a
    Response object.  Instead, these return strings.  The old behavior
    can be obtained by using ``render_template_to_response`` and
    ``render_transform_to_response``.

  - Added 'repoze.bfg.push:pushpage' decorator, which creates BFG views
    from callables which take (context, request) and return a mapping of
    top-level names.

  - Added ACL-based security.

  - Support for XSLT templates via a render_transform method

0.1

  - Initial release.

